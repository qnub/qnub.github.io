<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>qnub's blog</title><link>http://qnub.me/</link><description></description><atom:link href="http://qnub.me/feeds/it.rss.xml" rel="self"></atom:link><lastBuildDate>Mon, 04 Apr 2016 17:00:00 +0600</lastBuildDate><image><title>qnub's blog</title><url>http://qnub.me/favicon.png</url><link>http://qnub.me</link></image><item><title>Let’s Encrypt для сайта на GitHub pages через Kloudsec</title><link>http://qnub.me/2016/04/2016-04-04-letsencrypt-for-github-pages-with-kloudsec.html</link><description>&lt;img alt="Let’s Encrypt для сайта на GitHub pages через Kloudsec" src="http://qnub.me/images/it/kloudsec.png"/&gt;&lt;br/&gt;&lt;p&gt;Удивительный мир &lt;span class="caps"&gt;IT&lt;/span&gt;, онлайна и опенсорса. Опенсорс правда тут 
постольку-поскольку скорее GitHub как бесплатная общага для большинства 
опенсорс проектов. В общем жил я не тужил, никого не трогал и тут
приходит мне письмо от чувака по имени Steven Goh который говорит, что
является &lt;span class="caps"&gt;CEO&lt;/span&gt; проекта &lt;a href="https://www.kloudsec.com/"&gt;Kloudsec&lt;/a&gt; и что
он заметил у меня сайт, размещённый на GitHub и использующий собственный
домен. И мол он предлагает мне потестить их сервис, который может
дать этому сайту &lt;code&gt;https&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Мне стало интеерсно, т.к. я уже задумывался о том что в мире где скоро
не останется &lt;code&gt;http&lt;/code&gt; стайты на гитхабе без &lt;code&gt;SSL&lt;/code&gt; будут выглядеть странно.
&lt;strong&gt;Kloudsec&lt;/strong&gt; генерирует сертификат для сайта на всё том же 
&lt;a href="https://letsencrypt.org/"&gt;Let&amp;#8217;s Encrypt&lt;/a&gt;. Кстати, я разобрался с
конфигурацией &lt;strong&gt;Nginx&lt;/strong&gt; для использования их сертификатов, чтобы клиенты
не ругались: &lt;a href="https://gist.github.com/qnub/65c9c33e11181f48abf3"&gt;https://gist.github.com/qnub/65c9c33e11181f48abf3&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;В общем я залез в сервис и прикрутил это дело к нашему 
&lt;a href="https://gik.me"&gt;gik.me&lt;/a&gt;. Всё оказалось очень просто. Нужно настроить
&lt;span class="caps"&gt;DNS&lt;/span&gt; на их сервера и они остальное делают сами — в дашборде просто
переключаешь опции. Вообще у них есть и платные тарифы но для себя я в
них необходимости не увидел. Да и сам &lt;code&gt;SSL&lt;/code&gt; как бы тут тоже не 
полноценный — он шифрует соединение от клиента до их сервера. Между их
сервером и вашим (в нашем случае гитхабом) соединение всё ещё не&amp;nbsp;защищено.&lt;/p&gt;
&lt;p&gt;Но у них есть другие достоинства — &lt;span class="caps"&gt;CDN&lt;/span&gt;. Т.е. они берут контент с гитхаба
и кладут в свой &lt;span class="caps"&gt;CDN&lt;/span&gt;. Сайт стал ощутимо быстрее&amp;nbsp;открываться!&lt;/p&gt;
&lt;p&gt;&lt;img alt="atom font config" src="http://qnub.me/images/it/kloudsec-price.png" /&gt;&lt;/p&gt;
&lt;p&gt;Как видно из калькулятора есть ещё несколько&amp;nbsp;фишек.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">qnub</dc:creator><pubDate>Mon, 04 Apr 2016 17:00:00 +0600</pubDate><guid>tag:qnub.me,2016-04-04:2016/04/2016-04-04-letsencrypt-for-github-pages-with-kloudsec.html</guid><category>ssl</category><category>https</category><category>letsencrypt</category><category>github</category><category>kloudsec</category><category>cdn</category></item><item><title>Автообновление сертификатов Let’s Encrypt для Nginx</title><link>http://qnub.me/2015/12/2015-12-05-letsencrypt-nginx-autorenew.html</link><description>&lt;img alt="Автообновление сертификатов Let’s Encrypt для Nginx" src="http://qnub.me/images/it/letsencrypt.png"/&gt;&lt;br/&gt;&lt;p&gt;&lt;a href="https://letsencrypt.org/"&gt;Let&amp;#8217;s Encrypt&lt;/a&gt; перешёл в стадию публичной беты, а значит каждый может заполучить себе халявные &lt;span class="caps"&gt;SSL&lt;/span&gt; сертификаты для веба. Одно но — пока они очень короткоиграющие (3 месяца) потому рекомендуется замутить себе их автообновление раз в 2&amp;nbsp;месяца.&lt;/p&gt;
&lt;p&gt;В один сертификат можно вписать 2 домена. На домен вторго уровня можно получить сертификаты только на 2 домена. Другими словами на каждый домен второго уровня можно сделать халявное шифрование для него самого и одного поддомена или для 2х поддоменов, но не для него самого… Про большую вложенность не знаю, как и про &lt;em&gt;«wildcard»&lt;/em&gt; домены. Надеюсь будут&amp;nbsp;позже.&lt;/p&gt;
&lt;p&gt;Для начала нужно клонировать репозиторий с утилитой &lt;code&gt;letsencrypt&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/letsencrypt/letsencrypt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Вот вам работающий (на данный момент) скрипт для автообновления сертификатов &lt;a href="https://gist.github.com/qnub/ce475a5007db1d9b04d8"&gt;https://gist.github.com/qnub/ce475a5007db1d9b04d8&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;В скрипте надо&amp;nbsp;прописать:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;EMAIL=user@example.org  # ваш емайл для связи
LETSENCRYPT=/root/letsencrypt  # путь к клонированному репозиторию letsencrypt
MAIN_DOMAIN=example.com  # освноной домен сертификата
SECOND_DOMAIN=example.org  # дополнительный домен сертификата
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Скрипт забиваете в крон от рута на запуск раз в 2 месяца (старт 03:02 1го числа каждого второго&amp;nbsp;месяца):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;02 03 01 */2 * /&amp;lt;path_to&amp;gt;/renew-letsencrypt.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Для работы утилиты требуется 80 порт, так что скрипт остановит &lt;code&gt;nginx&lt;/code&gt; обновит сертификаты и запустит его снова (ждём плагин для nginx который позволит не отключать сервер для&amp;nbsp;обновления).&lt;/p&gt;
&lt;p&gt;Остаётся в настройках домена &lt;code&gt;nginx&lt;/code&gt; прописать что-то&amp;nbsp;вроде:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;listen&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="nd"&gt;:443&lt;/span&gt; &lt;span class="nt"&gt;ssl&lt;/span&gt; &lt;span class="nt"&gt;spdy&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;listen&lt;/span&gt; &lt;span class="nt"&gt;443&lt;/span&gt; &lt;span class="nt"&gt;ssl&lt;/span&gt; &lt;span class="nt"&gt;spdy&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;we&lt;/span&gt; &lt;span class="nt"&gt;enable&lt;/span&gt; &lt;span class="nt"&gt;SPDY&lt;/span&gt; &lt;span class="nt"&gt;here&lt;/span&gt;

&lt;span class="nt"&gt;ssl&lt;/span&gt; &lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="nt"&gt;ssl_certificate&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;letsencrypt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;live&lt;/span&gt;&lt;span class="o"&gt;/&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;full_domain_name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;/&lt;/span&gt;&lt;span class="nt"&gt;cert&lt;/span&gt;&lt;span class="nc"&gt;.pem&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;ssl_certificate_key&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;letsencrypt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;live&lt;/span&gt;&lt;span class="o"&gt;/&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;full_domain_name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;/&lt;/span&gt;&lt;span class="nt"&gt;privkey&lt;/span&gt;&lt;span class="nc"&gt;.pem&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;ssl_trusted_certificate&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;letsencrypt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;live&lt;/span&gt;&lt;span class="o"&gt;/&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;full_domain_name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;/&lt;/span&gt;&lt;span class="nt"&gt;chain&lt;/span&gt;&lt;span class="nc"&gt;.pem&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="nt"&gt;ssl_stapling&lt;/span&gt; &lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;ssl_stapling_verify&lt;/span&gt; &lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  
&lt;span class="nt"&gt;ssl_session_timeout&lt;/span&gt; &lt;span class="nt"&gt;5m&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;ssl_session_cache&lt;/span&gt; &lt;span class="nt"&gt;shared&lt;/span&gt;&lt;span class="nd"&gt;:SSL:10m&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="nt"&gt;ssl_protocols&lt;/span&gt; &lt;span class="nt"&gt;TLSv1&lt;/span&gt; &lt;span class="nt"&gt;TLSv1&lt;/span&gt;&lt;span class="nc"&gt;.1&lt;/span&gt; &lt;span class="nt"&gt;TLSv1&lt;/span&gt;&lt;span class="nc"&gt;.2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;ssl_prefer_server_ciphers&lt;/span&gt; &lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;ssl_ciphers&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="nt"&gt;add_header&lt;/span&gt; &lt;span class="nt"&gt;Strict-Transport-Security&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;max-age=63072000;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Не забывая заменить в путях &lt;code&gt;&amp;lt;full_domain_name&amp;gt;&lt;/code&gt; на имя домена использованного в перменной &lt;code&gt;$MAIN_DOMAIN&lt;/code&gt; скрипта&amp;nbsp;автообновления.&lt;/p&gt;
&lt;p&gt;Ну и можно сделать редирект с &lt;code&gt;http&lt;/code&gt; на &lt;code&gt;https&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;server_name&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;domain_name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;rewrite&lt;/span&gt;     &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;server_name&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;request_uri&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;permanent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;&amp;lt;domain_name&amp;gt;&lt;/code&gt; — имя домена для редиректа. Собственно конфиги (и редиректы) &lt;code&gt;nginx&lt;/code&gt; надо не забыть обновить во всех файлах (если ваши домены в разных файлах). Если у вас нет не зашифрованных серверов — имеет смысл указать редирект на дефолтном&amp;nbsp;сервере…&lt;/p&gt;
&lt;p&gt;В данный момент этот скрипт и сертификаты я уже спользую в своих сайтах, в том числе &lt;a href="https://www.registr.xyz"&gt;https://www.registr.xyz&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">qnub</dc:creator><pubDate>Sat, 05 Dec 2015 18:00:00 +0600</pubDate><guid>tag:qnub.me,2015-12-05:2015/12/2015-12-05-letsencrypt-nginx-autorenew.html</guid><category>ssl</category><category>https</category><category>letsencrypt</category><category>nginx</category></item><item><title>React vs Angular 2 в Meteor</title><link>http://qnub.me/2015/12/2015-12-02-react-angular2.html</link><description>&lt;img alt="React vs Angular 2 в Meteor" src="http://qnub.me/images/it/react-angular.png"/&gt;&lt;br/&gt;&lt;p&gt;Немного поделюсь впечатлениями от «ковыряния» в &lt;code&gt;React&lt;/code&gt;, упомянутом в &lt;a href="http://qnub.me/2015/10/2015-10-19-angular2-meteor.html"&gt;прошлом посте&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Впечатления крайне положительные, а в контексте &lt;code&gt;Meteor&lt;/code&gt; так и просто супер! Не удивительно, что разработчики &lt;code&gt;Meteor&lt;/code&gt; планируют сделать &lt;code&gt;React&lt;/code&gt; дефолтной системой рендеринга фронтенда. Для новичков они чуть позже сделают кое-какую обёртку, для упрощения работы с ним. Это будет называться &lt;code&gt;Blaze 2&lt;/code&gt;. Текущий фронтенд движок &lt;code&gt;Blaze&lt;/code&gt; представляет из себя модифицированный язык темлейтов &lt;code&gt;Handlebars&lt;/code&gt; (местный называется &lt;code&gt;Spacebars&lt;/code&gt;) + работа с эвентами и реактивным контекстом. Второй блэйз будет иметь схожий функционал (как я понимаю) но на основе&amp;nbsp;реакта.&lt;/p&gt;
&lt;p&gt;Так вот. О реакте. Это очень правильная и прямая концепция. Однонаправленное движение данных очень хорошо ложится на &lt;code&gt;DDP&lt;/code&gt; метеора и в итоге мы получаем простой, понятный и быстрый модульный фронтенд. С шикарной инкапсуляцией и очевидным&amp;nbsp;поведением.&lt;/p&gt;
&lt;p&gt;Не сказать, что первые шаги в реакте были простыми — сильно коробила вставка темплейтов в код. Т.е. сама концепция &lt;code&gt;JSX&lt;/code&gt;, но в 0.14 реакте появилась возможность выносить это дело во внешние файлы… которой я не стал пользоваться 😎 Да, код морды в коде компонента — вполне себе рабочий вариант, т.к. на самом деле там многое интегрировано и выносить это в отдельный файл особого смысла нет — внутри действительно&amp;nbsp;проще.&lt;/p&gt;
&lt;p&gt;Кроме того реактовский &lt;a href="http://www.material-ui.com/"&gt;Material &lt;span class="caps"&gt;UI&lt;/span&gt;&lt;/a&gt;, в отличие от ангуляровского, имеет все необходимые мне компоненты и работает с актуальной версией реакта. &lt;a href="https://registr.xyz"&gt;&lt;span class="caps"&gt;REGISTR&lt;/span&gt;&lt;/a&gt; был переписан мной на последнюю версию &lt;code&gt;Meteor&lt;/code&gt; + &lt;code&gt;React&lt;/code&gt; + &lt;code&gt;Material UI&lt;/code&gt; примерно за месяц (по дороге я ещё и сделал &lt;a href="https://atmospherejs.com/qnub/accounts-react-material-ui"&gt;компонент метеоровской авторизации под material ui&lt;/a&gt;). Сейчас он имеет аналогичный старому функционал. Работает быстрее и выглядит лучше. Но главное — имеет более логичную и лаконичную структуру компонентов морды. На самом деле я смог оставить почти всю старую бизнес-логику просто заменив элементы страницы на реактовские. Некоторые вещи даже не понадобились, т.к. в реакте это всё работает более&amp;nbsp;прямолинейно.&lt;/p&gt;
&lt;p&gt;В общем рекомендую реакт для ваших нужд, но помните — у него нет никаких функций для работы с данными и сетью, он просто принимает данные и отображает их изменения. Это не полноценная замена ангуляру, а только темплейты, если можно так выразиться (по-этому он так хорош с&amp;nbsp;метеором)…&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">qnub</dc:creator><pubDate>Wed, 02 Dec 2015 15:25:00 +0600</pubDate><guid>tag:qnub.me,2015-12-02:2015/12/2015-12-02-react-angular2.html</guid><category>meteor</category><category>angular</category><category>react</category></item><item><title>Angular 2 + Meteor</title><link>http://qnub.me/2015/10/2015-10-19-angular2-meteor.html</link><description>&lt;img alt="Angular 2 + Meteor" src="http://qnub.me/images/it/angular-meteor.jpg"/&gt;&lt;br/&gt;&lt;p&gt;В общем побаловался я с &lt;a href="http://angular-meteor.com/angular2"&gt;Angular 2 + Meteor&lt;/a&gt; и впечатления конечно положительные. Очень такой react-way но с встроенной возможностью использовать темплейты во внешних файлах (хотя они вроде грузятся асинхронно, так что не знаю какой от этого толк, кроме разделения сущностей при разработке). Т.е. очень быстро (&lt;a href="http://info.meteor.com/blog/comparing-performance-of-blaze-react-angular-meteor-and-angular-2-with-meteor"&gt;по тестам быстрее react&lt;/a&gt;), с виртуальным &lt;span class="caps"&gt;DOM&lt;/span&gt; и вот это вот всё. При этом это всё ещё angular, т.е. не только морда, а сервисы, роутер и прочие ништяки в новой понятной упаковке. Если разрабатывать на &lt;a href="http://www.typescriptlang.org/"&gt;TypeScript&lt;/a&gt; — немного непривычно и нужно следить за импортами и объявлениями типов (хотя в рабочий &lt;span class="caps"&gt;JS&lt;/span&gt; это в итоге не попадает, но во время разработки анализатор показывает возможные ошибки) что создаёт ауру серьёзности (и геморройности)&amp;nbsp;разработки.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;По&amp;nbsp;факту:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ТайпСкрипт заставляет тратить время на проверку подчёркнутых как ошибки объектов. Возможно в других системах это правильно, но в метеоре в глобальной области висит чуть менее чем всё и прописывание импортов чаще трата&amp;nbsp;времени.&lt;/p&gt;
&lt;p&gt;Ангуляр всё ещё альфа и когда будет релиз совершенно не ясно. Он всё ещё активно меняется и при этом он несовместим со старым ангуляром. Т.е. всё что уже сделано для предыдущей версии использовать нельзя, а исправится эта ситуация не ранее как после релиза. По моему скромному мнению хоть как-то пользовать его в продакшене можно будет где-то через пол-годика после релиза. Т.е. весна-лето 2016. Лично мне хочется материальных DatePicker и TimePicker под ангуляр и рабочую версию метеоровских аккаунтов. А пока же материального таймпикера нет даже под первую версию ангуляра. Я говорю про &lt;a href="https://material.angularjs.org/latest/"&gt;официальные материальные компоненты&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Продолжу пока игры с реактом, благо библиотек у него&amp;nbsp;хватает.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">qnub</dc:creator><pubDate>Mon, 19 Oct 2015 13:17:00 +0600</pubDate><guid>tag:qnub.me,2015-10-19:2015/10/2015-10-19-angular2-meteor.html</guid><category>meteor</category><category>angular</category><category>react</category></item><item><title>Экранная Emoji клавиатура для Ubuntu</title><link>http://qnub.me/2015/07/2015-07-10-onboard-emoji.html</link><description>&lt;img alt="Экранная Emoji клавиатура для Ubuntu" src="http://qnub.me/images/it/onboard-emoji.png"/&gt;&lt;br/&gt;&lt;p&gt;Наконец дошли руки сделать экранную клавиатуру для ввода &lt;strong&gt;«emoji»&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;TL&lt;/span&gt;;&lt;span class="caps"&gt;DR&lt;/span&gt;&lt;/strong&gt; &lt;a href="https://github.com/qnub/onboard-emoji"&gt;https://github.com/qnub/onboard-emoji&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Точнее не клавиатуру, а раскладку для уже существующей софтверной клавиатуры &lt;strong&gt;«OnBoard»&lt;/strong&gt;. Я тут пару месяцев проводил эксперимент с жизнью в &lt;strong&gt;Mac &lt;span class="caps"&gt;OS&lt;/span&gt;&lt;/strong&gt;, после чего успешно вернулся к родной &lt;strong&gt;Ubuntu&lt;/strong&gt;. Не буду здесь расписывать чем она лучше/хуже для меня — это тема для отдельного поста, но скажу, что некоторых штук которые были там мне в здесь не достаёт. В частности вызываемая хоткеем панель для ввода &lt;strong&gt;«emoji»&lt;/strong&gt;. Почему-то оказалось что в убунтах аналога этому нет хотя возможности для несложной реализации&amp;nbsp;имеются.&lt;/p&gt;
&lt;p&gt;Я много гуглил разные варианты ввода emoji в &lt;strong&gt;linux&lt;/strong&gt; но всё заканчивалось только их выводом. Кстати для этого достаточно просто установить шрифт &lt;strong&gt;Symbola&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install ttf-ancient-fonts
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Как вариант можно установить &lt;a href="https://github.com/googlei18n/noto-emoji"&gt;Noto Emoji&lt;/a&gt; или &lt;a href="http://emojisymbols.com/beforeuse.php"&gt;EmojiSymbols&lt;/a&gt; (или всё сразу). Система в большинстве случаев пытается найти отсутсвующий в шрифте по-умолчанию символ в других шрифтах. Бывают казусы, вроде как в редакторе &lt;strong&gt;Atom&lt;/strong&gt; но тут он решается простым указанием нескольких шрифтов через&amp;nbsp;запятую:&lt;/p&gt;
&lt;p&gt;&lt;img alt="atom font config" src="http://qnub.me/images/it/atom-font-config.png" /&gt;&lt;/p&gt;
&lt;p&gt;В общем при наличии довольно неплохой и настраиваемой экранной клавиатуры &lt;strong&gt;OnBoard&lt;/strong&gt; с довольно прямолинейным созданием любых раскладок для неё — оказалось ни кто ещё не создал раскладки с emoji. Т.е. раскладки где они есть — существуют, но ≈25 emoji это же не серьёзно! 😂 А так как у меня тут выдалась свободная неделька — я решил этот пробел&amp;nbsp;заполнить.&lt;/p&gt;
&lt;p&gt;Для уcтановки emoji раскладки в OnBoard нужно &lt;a href="https://github.com/qnub/onboard-emoji/archive/master.zip"&gt;скачать архив c emoji раскладкой для &lt;strong&gt;OnBoard&lt;/strong&gt;&lt;/a&gt; и скопировать содержимое папки &lt;code&gt;layout&lt;/code&gt; в &lt;code&gt;~/.local/share/onboard/layouts&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Дальше в &lt;code&gt;Параметры системы… → Специальные возможности&lt;/code&gt; на вкладке &lt;code&gt;Ввод&lt;/code&gt; включить &lt;code&gt;Экранную клавиатуру&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="onscreen keyboard enable" src="http://qnub.me/images/it/onscreen-keyboard-enable.png" /&gt;&lt;/p&gt;
&lt;p&gt;Это будет автоматически запускать сервис &lt;strong&gt;OnBoard&lt;/strong&gt; для вас. Теперь в трее появится значок запущенной клавиатуры и, скорее всего появится плавающий значок на экране. Рекомендую зайти в настройки и перенастроить на свой вкус, там довольно много опций и вариантов использования. Основные настройки у меня выглядят&amp;nbsp;так:&lt;/p&gt;
&lt;p&gt;&lt;img alt="onboard general settings" src="http://qnub.me/images/it/onboard-general-settings.png" /&gt;&lt;/p&gt;
&lt;p&gt;Также в &lt;code&gt;Параметры системы… → Клавиатура&lt;/code&gt; я добавил сочетание клавиш для быстрого вызова кливатуры (команда &lt;code&gt;onboard&lt;/code&gt;):&lt;/p&gt;
&lt;p&gt;&lt;img alt="onboard hotkey" src="http://qnub.me/images/it/onboard-hotkey.png" /&gt;&lt;/p&gt;
&lt;p&gt;Теперь когда нужно где-то вставить смайлик я жму &lt;code&gt;Ctrl+Super+Space&lt;/code&gt;, тыкаю в появившейся клавиатуре нужную кнопку и нажимаю справа на ней «крест» чтобы эту клавиатуру скрыть… На &lt;a href="https://github.com/googlei18n/noto-emoji"&gt;гитхабе&lt;/a&gt; есть сорцы, а также описание как кастомизировать всё это дело. Пулл-реквесты&amp;nbsp;приветствуются!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/googlei18n/noto-emoji"&gt;GitHub&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://github.com/qnub/onboard-emoji/archive/master.zip"&gt;архив c emoji раскладкой для &lt;strong&gt;OnBoard&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">qnub</dc:creator><pubDate>Fri, 10 Jul 2015 21:40:00 +0600</pubDate><guid>tag:qnub.me,2015-07-10:2015/07/2015-07-10-onboard-emoji.html</guid><category>ubuntu</category><category>onboard</category><category>emoji</category><category>keyboard</category></item><item><title>Бесплатный хостинг на GitHub блога, сгенерированного Pelican</title><link>http://qnub.me/2015/02/2015-02-10-pelican-site-on-github.html</link><description>&lt;img alt="Бесплатный хостинг на GitHub блога, сгенерированного Pelican" src="http://qnub.me/images/blog/pelican.png"/&gt;&lt;br/&gt;&lt;p&gt;Исходник этого самого блога можно найти на &lt;a href="https://github.com/qnub/qnub.github.io/tree/master"&gt;GitHub&lt;/a&gt;. Здесь немного модифицирован &lt;code&gt;Makefile&lt;/code&gt; для поддержки &lt;code&gt;virtualenv&lt;/code&gt; находящегося в каталоге &lt;code&gt;.env&lt;/code&gt; в каталоге с, собственно, &lt;code&gt;git&lt;/code&gt; самого сайта. Тема разработана &lt;a href="https://github.com/temapavloff"&gt;temapavloff&lt;/a&gt;, а дизайн &lt;a href="https://ru.linkedin.com/in/yahujik/ru"&gt;yahujik&lt;/a&gt;. И то и другое немного изменено и, и то и другое в оригинале используется в нашем совместном проекте &lt;a href="http://gik.me"&gt;gik.me подкаст&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Я добавил обственную версию генератора &lt;span class="caps"&gt;RSS&lt;/span&gt; который поддерживает мультимедиа аттачи (для подкаста) и в самой теме активно используются мета-данные из статей для генерации правильных &lt;a href="http://ogp.me/"&gt;Open Graph&lt;/a&gt;&amp;nbsp;тегов.&lt;/p&gt;
&lt;p&gt;Дополнительные опции в конфигурации &lt;strong&gt;Pelican&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;filters&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;cat_name&lt;/span&gt;

&lt;span class="n"&gt;JINJA_FILTERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;cat_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cat_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# позволяет выводить в темплейте руссифицированные имена категорий&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# карта преобразования имён категорий для вышеприведённого фильтра&lt;/span&gt;
&lt;span class="n"&gt;CATEGORY_MAP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;link&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;u&amp;#39;ссылки&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;quote&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;u&amp;#39;цитаты&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;text&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;u&amp;#39;текст&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;blog&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;u&amp;#39;блог&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;news&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;u&amp;#39;новости&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;article&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;u&amp;#39;статьи&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# перенос в корень сайта нужных статических файлов при генерации&lt;/span&gt;
&lt;span class="c1"&gt;# CNAME содержит собственный домен сайта для использования с GitHub Pages&lt;/span&gt;
&lt;span class="n"&gt;STATIC_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;images&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;extra/robots.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;extra/favicon.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;extra/favicon.ico&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;extra/CNAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;EXTRA_PATH_METADATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;extra/robots.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;robots.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;extra/favicon.ico&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;favicon.ico&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;extra/favicon.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;favicon.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;extra/CNAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;CNAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;PLUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;feeds_with_media&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;# сосбтвенно плагин, герерирующий более правильный RSS&lt;/span&gt;

&lt;span class="c1"&gt;# дополнительные данные для вышеприведённого плагина&lt;/span&gt;
&lt;span class="n"&gt;FEED_IMAGE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/favicon.png&amp;#39;&lt;/span&gt;  &lt;span class="c1"&gt;# картинка фида&lt;/span&gt;
&lt;span class="n"&gt;FEED_FOOTER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;  &lt;span class="c1"&gt;# футер с копирайтом добавляется если пост в фиде содержит медиа-вложение&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Сам генератор &lt;span class="caps"&gt;RSS&lt;/span&gt; берёт информацию для вложения из мета-тегов. Если у статьи указан тег &lt;code&gt;Encolsure:&lt;/code&gt; то ссылка из этого тега будет добавлена в пост фида как ссылка на вложение, а &lt;code&gt;MIME-type&lt;/code&gt; из тега &lt;code&gt;Mime:&lt;/code&gt; будет использован для указания типа этого&amp;nbsp;вложения.&lt;/p&gt;
&lt;p&gt;Также тема поддерживает эти мета-теги добавляет соотвествующие &lt;code&gt;og:&lt;/code&gt; мета-теги в &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; страницы. Туда же будет добавлен линк на картинку, если указан тег &lt;code&gt;Image:&lt;/code&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">qnub</dc:creator><pubDate>Tue, 10 Feb 2015 15:00:00 +0600</pubDate><guid>tag:qnub.me,2015-02-10:2015/02/2015-02-10-pelican-site-on-github.html</guid><category>github</category><category>static</category><category>pelican</category></item></channel></rss>